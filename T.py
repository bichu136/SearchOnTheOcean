#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 5.0.3
#  in conjunction with Tcl version 8.6
#    Apr 05, 2020 01:52:03 PM +07  platform: Linux

import sys

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk
    from tkinter import messagebox
try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True
import draw
import time
import SearchingRecursive as SR
import OnTheOceanObject as MyObj
SearchAlgo = None

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root,top,map,SearchAlgo,width,height
    root = tk.Tk()
    top = TopLvl(height = 25 ,width = 25 ,top = root)
    root.mainloop()

w = None
def create_TopLvl(rt, *args, **kwargs):
    '''Starting point when module is imported by another module.
       Correct form of call: 'create_TopLvl(root, *args, **kwargs)' .'''
    global w, w_win, root
    #rt = root
    root = rt
    w = tk.Toplevel (root)
    top = TopLvl (w)
    return (w, top)

def destroy_TopLvl():
    global w
    w.destroy()
    w = None

class TopLvl:
    def initializeComponent(self,top):
        '''This class configures and populates the toplevel window.
                   top is the toplevel containing window.'''
        global SearchAlgo
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9'  # X11 color: 'gray85'
        _ana1color = '#d9d9d9'  # X11 color: 'gray85'
        _ana2color = '#ececec'  # Closest X11 color: 'gray92'
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.', background=_bgcolor)
        self.style.configure('.', foreground=_fgcolor)
        self.style.configure('.', font="TkDefaultFont")
        self.style.map('.', background=
        [('selected', _compcolor), ('active', _ana2color)])

        top.geometry("793x544+531+132")
        top.minsize(1, 1)
        top.maxsize(1905, 1050)
        top.resizable(0, 0)
        top.title("New Toplevel")
        top.configure(highlightcolor="black")

        self.CnvOcean = tk.Canvas(top)
        self.CnvOcean.place(relx=0.013, rely=0.018, relheight=0.919
                            , relwidth=0.632)
        self.CnvOcean.configure(background="#221cd8")
        self.CnvOcean.configure(borderwidth="1")
        self.CnvOcean.configure(relief="ridge")
        self.CnvOcean.configure(selectbackground="#c4c4c4")
        self.CnvOcean.bind('<Button-1>',CanvasClick
                           )
        self.BtnOne = tk.Button(top)
        self.BtnOne.place(relx=0.65, rely=0.10, height=28, width=67)
        self.BtnOne.configure(activebackground="#f9f9f9")
        self.BtnOne.configure(text='''next step''')
        self.BtnOne.configure(command = BtnOneClick)
        self.BtnFinish = tk.Button(top)
        self.BtnFinish.place(relx=0.65, rely=0.15, height=28, width=100)
        self.BtnFinish.configure(activebackground="#f9f9f9")
        self.BtnFinish.configure(text='''solve this map''')
        self.BtnFinish.configure(command = BtnFinishClick)
        self.menubar = tk.Menu(top, font="TkMenuFont", bg=_bgcolor, fg=_fgcolor)
        top.configure(menu=self.menubar)

        self.LstObject = tk.Listbox(top)
        self.LstObject.place(relx=0.681, rely=0.478, relheight=0.134
                            , relwidth=0.15)
        self.LstObject.configure(background="white")
        self.LstObject.configure(cursor="fleur")
        self.LstObject.configure(font="TkFixedFont")
        self.LstObject.insert("end", "Boat")
        self.LstObject.insert("end", "Obstacle")
        self.LstObject.insert("end", "Fuel")
        self.LstObject.insert("end", "Goal")
        self.LstObject.configure(command = None)


        self.TSeparator1 = ttk.Separator(top)
        self.TSeparator1.place(relx=0.651, rely=0.377, relwidth=0.3)

        self.Label1 = tk.Label(top)
        self.Label1.place(relx=0.65, rely=0.386, height=50, width=150)
        self.Label1.configure(text='''Chọn Đối tượng''')

        self.Text1 = tk.Text(top)
        self.Text1.place(relx=0.656, rely=0.73, relheight=0.04, relwidth=0.083)
        self.Text1.configure(background="white")
        self.Text1.configure(font="TkTextFont")
        self.Text1.configure(selectbackground="#c4c4c4")
        self.Text1.configure(wrap="word")

        self.Label2 = tk.Label(top)
        self.Label2.place(relx=0.656, rely=0.68, height=28, width=200)
        self.Label2.configure(text='''số km đi đc khi đầy bình :''')
        self.LblFuel = tk.Label(top)

    def __init__(self, height,width,top = None):
        self.initializeComponent(top)
        self.map = MyObj.Map(height,width)
        for i in range(height):
            self.map.grids.append([])
            for j in range(width):
                self.map.grids.append(MyObj.Grid())
        draw.drawGrid(self.CnvOcean)
    def Btn(self):
        pass
def BtnOneClick():
    if SR.boat is None:
        messagebox.showerror("lỗi", "ko thấy con thuyền")
        return
    if SR.goal is None:
        messagebox.showerror("lỗi","ko thấy đích")
        return
    if SR.fuel_a is None:
        try:
            SR.fuel_a = int(top.Text1.get("1.0","end-1c"))
        except:
            print("co loi say ra")
            return
    if SR.open == []:
        print("no solution")
        return
    # doOneStep
    SR.bfs_recursive(top.map)
    #print(SR.open[0], top.map.grids[SR.open[0].y][SR.open[0].x].current_fuel)
    draw.drawOpen(top.CnvOcean,SR.open)
    draw.drawClose(top.CnvOcean,SR.close)
    draw.drawBoat(top.CnvOcean,SR.boat.x*20,SR.boat.y*20)
    if SR.path:
        draw.drawPath(top.CnvOcean,SR.path)
    draw.drawFuel(top.CnvOcean)
    draw.drawObstacle(top.CnvOcean)
    draw.drawGoal(top.CnvOcean, SR.goal.x * 20, SR.goal.y * 20)
    top.LblFuel2.configure(text = '''{}'''.format(SR.fuel_a))
    if open !=[]:
        draw.drawCurrent(top.CnvOcean,SR.open[0])
    #draw.drawOpen()
def BtnFinishClick():
    #DoAllStep
    if SR.fuel_a is None:
        try:
            SR.fuel_a = int(top.Text1.get("1.0","end-1c"))
        except:
            print("co loi say ra")
            return
    while(SR.path ==[] and SR.open != []):
        SR.bfs_recursive(top.map)
    draw.drawOpen(top.CnvOcean, SR.open)
    draw.drawClose(top.CnvOcean, SR.close)
    draw.drawBoat(top.CnvOcean, SR.boat.x * 20, SR.boat.y * 20)
    if SR.path:
        draw.drawPath(top.CnvOcean, SR.path)
    draw.drawFuel(top.CnvOcean)
    draw.drawObstacle(top.CnvOcean)
    draw.drawGoal(top.CnvOcean, SR.goal.x * 20, SR.goal.y * 20)

def CanvasClick(event):
    x = event.x
    y = event.y
    x = x - (x%20)
    y= y - (y%20)
    print(x,y)
    try :
        r = top.LstObject.curselection()[0]
    except:
        r = -1
    if(r == 0):
        draw.drawBoat(top.CnvOcean, x, y)
        x = x // 20
        y = y // 20
        if(SR.boat is None):
            SR.boat = MyObj.pos(x,y)
        else:
            SR.boat.x = x
            SR.boat.y = y

    elif r == 1:
        draw.addObstacles(x,y)
        draw.drawObstacle(top.CnvOcean)
        x = x // 20
        y = y // 20
        top.map.grids[y][x].type = 1
    elif r==2:
        draw.addFuel(x,y)
        draw.drawFuel(top.CnvOcean)
        x = x // 20
        y = y // 20
        top.map.grids[y][x].type = 2

    elif r == 3:
        draw.drawGoal(top.CnvOcean, x, y)
        x = x // 20
        y = y // 20
        if (SR.goal is None):
            SR.goal =MyObj.pos(x,y)
        else:
            SR.goal.x = x
            SR.goal.y = y
    else:
        print("bạn chưa chọn chức năng hoặc chức năng đó chưa đc cài ")
if __name__ == '__main__':
    vp_start_gui()