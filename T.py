#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 5.0.3
#  in conjunction with Tcl version 8.6
#    Apr 05, 2020 01:52:03 PM +07  platform: Linux

import sys

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True
import draw
from SearchingRecursive import *
SearchAlgo = None
obstacles = []
fuels = []
boat = None
goal = None
grid = []
def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root,top,grid,SearchAlgo
    for i in range(25):
        grid.append(([None]*25))
    root = tk.Tk()
    SearchAlgo = tk.IntVar()
    top = TopLvl (root)
    root.mainloop()

w = None
def create_TopLvl(rt, *args, **kwargs):
    '''Starting point when module is imported by another module.
       Correct form of call: 'create_TopLvl(root, *args, **kwargs)' .'''
    global w, w_win, root
    #rt = root
    root = rt
    w = tk.Toplevel (root)
    top = TopLvl (w)
    return (w, top)

def destroy_TopLvl():
    global w
    w.destroy()
    w = None

class TopLvl:
    def initializeComponent(self,top):
        '''This class configures and populates the toplevel window.
                   top is the toplevel containing window.'''
        global SearchAlgo
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9'  # X11 color: 'gray85'
        _ana1color = '#d9d9d9'  # X11 color: 'gray85'
        _ana2color = '#ececec'  # Closest X11 color: 'gray92'
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.', background=_bgcolor)
        self.style.configure('.', foreground=_fgcolor)
        self.style.configure('.', font="TkDefaultFont")
        self.style.map('.', background=
        [('selected', _compcolor), ('active', _ana2color)])

        top.geometry("793x544+531+132")
        top.minsize(1, 1)
        top.maxsize(1905, 1050)
        top.resizable(0, 0)
        top.title("New Toplevel")
        top.configure(highlightcolor="black")

        self.CnvOcean = tk.Canvas(top)
        self.CnvOcean.place(relx=0.013, rely=0.018, relheight=0.919
                            , relwidth=0.632)
        self.CnvOcean.configure(background="#221cd8")
        self.CnvOcean.configure(borderwidth="1")
        self.CnvOcean.configure(relief="ridge")
        self.CnvOcean.configure(selectbackground="#c4c4c4")
        self.CnvOcean.bind('<Button-1>',CanvasClick)
        self.BtnOne = tk.Button(top)
        self.BtnOne.place(relx=0.706, rely=0.294, height=28, width=67)
        self.BtnOne.configure(activebackground="#f9f9f9")
        self.BtnOne.configure(text='''next step''')
        self.BtnOne.configure(command = None)
        self.BtnFinish = tk.Button(top)
        self.BtnFinish.place(relx=0.82, rely=0.294, height=28, width=100)
        self.BtnFinish.configure(activebackground="#f9f9f9")
        self.BtnFinish.configure(text='''solve this map''')
        self.BtnFinish.configure(command = BtnFinishClick)

        self.RdBtnDFS = tk.Radiobutton(top)
        self.RdBtnDFS.place(relx=0.718, rely=0.088, relheight=0.042
                            , relwidth=0.097)
        self.RdBtnDFS.configure(activebackground="#f9f9f9")
        self.RdBtnDFS.configure(justify='left')
        self.RdBtnDFS.configure(text='''DFS''')
        self.RdBtnDFS.configure(variable = SearchAlgo)
        self.RdBtnDFS.configure(value=0)

        self.RdBtnBFS = tk.Radiobutton(top)
        self.RdBtnBFS.place(relx=0.716, rely=0.189, relheight=0.042
                            , relwidth=0.097)
        self.RdBtnBFS.configure(activebackground="#f9f9f9")
        self.RdBtnBFS.configure(justify='left')
        self.RdBtnBFS.configure(text='''BFS''')
        self.RdBtnBFS.configure(variable = SearchAlgo)
        self.RdBtnBFS.configure(value=1)

        self.RdBtnIDS = tk.Radiobutton(top)
        self.RdBtnIDS.place(relx=0.726, rely=0.14, relheight=0.042
                            , relwidth=0.073)
        self.RdBtnIDS.configure(activebackground="#f9f9f9")
        self.RdBtnIDS.configure(justify='left')
        self.RdBtnIDS.configure(text='''IDS''')
        self.RdBtnIDS.configure(variable = SearchAlgo)
        self.RdBtnIDS.configure(value=2)

        self.RdBtnLowCost = tk.Radiobutton(top)
        self.RdBtnLowCost.place(relx=0.706, rely=0.239, relheight=0.042
                                , relwidth=0.149)
        self.RdBtnLowCost.configure(activebackground="#f9f9f9")
        self.RdBtnLowCost.configure(justify='left')
        self.RdBtnLowCost.configure(text='''LowCost''')
        self.RdBtnLowCost.configure(variable = SearchAlgo)
        self.RdBtnLowCost.configure(value=3)

        self.menubar = tk.Menu(top, font="TkMenuFont", bg=_bgcolor, fg=_fgcolor)
        top.configure(menu=self.menubar)

        self.LstObject = tk.Listbox(top)
        self.LstObject.place(relx=0.681, rely=0.478, relheight=0.134
                            , relwidth=0.299)
        self.LstObject.configure(background="white")
        self.LstObject.configure(cursor="fleur")
        self.LstObject.configure(font="TkFixedFont")
        self.LstObject.insert("end", "Boat")
        self.LstObject.insert("end", "Obstacle")
        self.LstObject.insert("end", "Fuel")
        self.LstObject.insert("end", "Goal")
        self.LstObject.configure(command = None)


        self.TSeparator1 = ttk.Separator(top)
        self.TSeparator1.place(relx=0.651, rely=0.377, relwidth=0.407)

        self.Label1 = tk.Label(top)
        self.Label1.place(relx=0.656, rely=0.386, height=42, width=238)
        self.Label1.configure(text='''Chọn Đối tượng để thêm vào bản đồ''')

        self.Text1 = tk.Text(top)
        self.Text1.place(relx=0.832, rely=0.68, relheight=0.04, relwidth=0.083)
        self.Text1.configure(background="white")
        self.Text1.configure(font="TkTextFont")
        self.Text1.configure(selectbackground="#c4c4c4")
        self.Text1.configure(wrap="word")

        self.Label2 = tk.Label(top)
        self.Label2.place(relx=0.656, rely=0.68, height=28, width=134)
        self.Label2.configure(text='''Lượng xăng hiện tại''')
    def __init__(self, top=None):
        self.initializeComponent(top)
        draw.drawGrid(self.CnvOcean)
    def Btn(self):
        pass
def BtnOneClick():
    top.CnvOcean.configure(command=None)
    recursive(False)
def BtnFinishClick():
    global top
    top.CnvOcean.configure(command=None)
    recursive(True)

        #timer
def CanvasClick(event):
    global boat,goal
    x = event.x
    y = event.y
    x = x - (x%20)
    y= y - (y%20)
    print(x,y)
    try :
        r = top.LstObject.curselection()[0]
    except:
        r = -1
    if(r == 0):
        draw.drawBoat(top.CnvOcean, x, y)
        x = x // 20
        y = y // 20
        if(boat == None):
            boat = [0,1]
        else:
            boat[0] = x
            boat[1] = y

    elif r == 1:

        draw.drawObstacle(top.CnvOcean,x,y)
        x = x // 20
        y = y // 20
        grid[x][y] = 0
    elif r==2:
        draw.drawFuel(top.CnvOcean, x, y)
        x = x // 20
        y = y // 20
        grid[x][y] = 1

    elif r == 3:
        draw.drawGoal(top.CnvOcean, x, y)
        x = x // 20
        y = y // 20
        if (goal ==None):
            goal =[x,y]
        else:
            goal[0] = x
            goal[1] = y

    else:
        print("bạn chưa chọn chức năng hoặc chức năng đó chưa đc cài ")


def can_go():
    global boat,grid
    up = grid[boat[0]][boat[1]-1]
    down = grid[boat[0]][boat[1]+1]
    left = grid[boat[0]-1][boat[1]]
    right = grid[boat[0]+1][boat[1]]

def go(Direction= "up"):

    global grid
    x = boat.posx//20
    y = boat.posy//20
    grid[x][y] = None
    if Direction == "up":
        boat.posy -=20
    elif Direction == "down":
        boat.posy += 20
    elif Direction == "left":
        boat.posx -= 20
    elif Direction == "right":
        boat.posy += 20

    grid[y][x] = boat
    draw.drawBoat(top.CnvOcean,boat.posx,boat.posy)



def recursive(b):
    sel = SearchAlgo.get()
    if sel == 0:
        DFSrecursive()
    elif sel == 1:
        BFSrecursive()
    elif sel == 2:
        IDFrecursive()
    elif sel == 3:
        LowCostRecursive()

    if (goal.posx == boat.posx and goal.posy == boat.posy):
        return
    if (b == True):
        top.CnvOcean.after(10, recursive(True))

if __name__ == '__main__':

    vp_start_gui()



